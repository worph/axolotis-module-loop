{"version":3,"sources":["../src/index.ts","../src/Identifier.ts","../src/services/loop/AnimationFrameLoopFactory.ts","../src/services/loop/FrameLoopManager.ts","../src/services/loop/SetIntervalLoopFactory.ts","../src/services/loop/SetTimeoutLoopFactory.ts","../src/services/perf/TimeLogger.ts"],"sourcesContent":["import {AxModule} from \"axolotis-module-definition\";\r\nimport {ContainerModule, interfaces} from \"inversify\";\r\nimport {\r\n    AnimationFrameLoopFactoryName,\r\n    FrameLoopManagerName,\r\n    SetIntervalLoopFactoryName,\r\n    SetTimeoutLoopFactoryName,\r\n    TimeLoggerName\r\n} from \"./Identifier\";\r\nimport {AnimationFrameLoopFactory} from \"./services/loop/AnimationFrameLoopFactory\";\r\nimport {FrameLoopManager} from \"./services/loop/FrameLoopManager\";\r\nimport {SetIntervalLoopFactory} from \"./services/loop/SetIntervalLoopFactory\";\r\nimport {SetTimeoutLoopFactory} from \"./services/loop/SetTimeoutLoopFactory\";\r\nimport {TimeLogger} from \"./services/perf/TimeLogger\";\r\n\r\nexport * from \"./services/loop/FrameLoopManager\";\r\nexport * from \"./services/loop/AnimationFrameLoopFactory\"\r\nexport * from \"./services/loop/LoopInterface\"\r\nexport * from \"./services/loop/SetIntervalLoopFactory\"\r\nexport * from \"./services/loop/SetTimeoutLoopFactory\"\r\n\r\nexport * from \"./services/perf/TimeLogger\"\r\n\r\nexport * from \"./Identifier\";\r\n\r\nexport class AxLoopModule implements AxModule {\r\n    getModule(): ContainerModule {\r\n        return new ContainerModule((bind: interfaces.Bind) => {\r\n            bind(FrameLoopManagerName).to(FrameLoopManager).inSingletonScope();\r\n            bind(TimeLoggerName).to(TimeLogger).inSingletonScope();\r\n            bind(AnimationFrameLoopFactoryName).to(AnimationFrameLoopFactory).inSingletonScope();\r\n            bind(SetTimeoutLoopFactoryName).to(SetTimeoutLoopFactory).inSingletonScope();\r\n            bind(SetIntervalLoopFactoryName).to(SetIntervalLoopFactory).inSingletonScope();\r\n        });\r\n    }\r\n\r\n}\r\n","export const FrameLoopManagerName = Symbol.for(\"FrameLoopManagerName\");\r\nexport const AnimationFrameLoopFactoryName = Symbol.for(\"AnimationFrameLoopFactoryName\");\r\nexport const SetIntervalLoopFactoryName = Symbol.for(\"SetIntervalLoopFactoryName\");\r\nexport const SetTimeoutLoopFactoryName = Symbol.for(\"SetTimeoutLoopFactoryName\");\r\nexport const TimeLoggerName = Symbol.for(\"TimeLoggerName\");\r\n","import {inject, injectable} from \"inversify\";\r\nimport {FrameLoopManagerName, TimeLoggerName} from \"../../Identifier\";\r\nimport {TimeLogger, TimeLoggerInterface} from \"../perf/TimeLogger\";\r\nimport {FrameLoopManager} from \"./FrameLoopManager\";\r\nimport {LoopCallback, LoopInterface, LoopRemoverInterface} from \"./LoopInterface\";\r\n\r\nexport class AnimationFrameLoop implements LoopInterface {\r\n    enable = false;\r\n\r\n    constructor(private callback: LoopCallback, private timeLogger: TimeLoggerInterface) {\r\n    }\r\n\r\n    start() {\r\n        if(this.enable){\r\n            throw new Error(\"Loop already started\");\r\n        }\r\n        this.enable = true;\r\n        let prevTime: number = 0;\r\n        const animate = (t) => {\r\n            const delta = t - prevTime;\r\n            prevTime = t;\r\n            if(this.enable) {\r\n                requestAnimationFrame(animate);\r\n            }\r\n            this.timeLogger.monitoringStart();\r\n            this.callback(delta);\r\n            this.timeLogger.monitoringEnd();\r\n        };\r\n        requestAnimationFrame(animate);\r\n    }\r\n\r\n    stop() {\r\n        this.enable = false;\r\n    }\r\n}\r\n\r\n@injectable()\r\nexport class AnimationFrameLoopFactory {\r\n\r\n    constructor(\r\n        @inject(TimeLoggerName) private timeLogger:TimeLogger,\r\n        @inject(FrameLoopManagerName) private frameLoop: FrameLoopManager\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * Create a loop based on requestAnimationFrame.\r\n     * Note tha if the focus is lost, the loop will be paused thus it should only be used for GFX and not for logic.\r\n     * @param name\r\n     * @param callback\r\n     */\r\n    create(name: string, callback:LoopCallback,): LoopRemoverInterface {\r\n        let loop = new AnimationFrameLoop(callback, this.timeLogger.getTimeLogger(name));\r\n        this.frameLoop.addLoop(name,loop);\r\n        return {\r\n            loop: loop,\r\n            remover: () => {\r\n                this.frameLoop.removeLoop(name);\r\n            }\r\n        };\r\n    }\r\n}\r\n","import {injectable} from \"inversify\";\r\nimport {LoopInterface} from \"./LoopInterface\";\r\n/**Centralized controller for all loop\r\n**/\r\n@injectable()\r\nexport class FrameLoopManager {\r\n    //TODO\r\n    // low workload adaptative loop? Like when FPS is green we execute code once evry Frame when it is not we execute once every seconde.\r\n    // worker loop?\r\n\r\n    started = false;\r\n    constructor() {\r\n    }\r\n\r\n    loops = new Map<string, LoopInterface>();\r\n\r\n\r\n    start() {\r\n        this.started = true;\r\n        for (const [key,entry] of this.loops) {\r\n            entry.start();\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        this.started = false;\r\n        for (const [key,entry] of this.loops) {\r\n            entry.stop();\r\n        }\r\n    }\r\n\r\n    addLoop(name:string,loop:LoopInterface): () => void {\r\n        if(this.loops.has(name)){\r\n            throw new Error(\"Loop name already used\");\r\n        }\r\n        if(this.started) {\r\n            loop.start();\r\n        }\r\n        this.loops.set(name,loop);\r\n        return () => {\r\n            this.removeLoop(name);\r\n        }\r\n    }\r\n\r\n    removeLoop(name:string) {\r\n        this.loops.get(name).stop();\r\n        this.loops.delete(name);\r\n    }\r\n\r\n}\r\n","import {inject, injectable} from \"inversify\";\r\nimport {FrameLoopManagerName, TimeLoggerName} from \"../../Identifier\";\r\nimport {TimeLogger, TimeLoggerInterface} from \"../perf/TimeLogger\";\r\nimport {FrameLoopManager} from \"./FrameLoopManager\";\r\nimport {LoopCallback, LoopInterface, LoopRemoverInterface} from \"./LoopInterface\";\r\n\r\n/**\r\n * Using `setInterval` to create a loop has its own advantages and drawbacks. Here are some key points to consider:\r\n *\r\n * Advantages:\r\n *\r\n * 1. **Simplicity:** `setInterval` is straightforward to use and easy to understand. It allows you to create a loop that executes a function at regular intervals with a simple syntax.\r\n * ```javascript\r\n * const intervalId = setInterval(myFunction, interval);\r\n * ```\r\n *\r\n * 2. **Consistent intervals:** With `setInterval`, the time between each function call is fixed, ensuring a consistent interval between iterations. This is useful when you need to perform a task periodically, like updating the UI or polling a server.\r\n *\r\n * 3. **Automatic loop:** Once `setInterval` is called, it will continue to execute the specified function at the given interval until it's explicitly stopped using `clearInterval`. This means you don't need to manually schedule the next call within the function.\r\n *\r\n * Drawbacks:\r\n *\r\n * 1. **Fixed interval:** The interval between function calls is fixed, which means you cannot dynamically adjust the time between calls based on processing time or other conditions. If you need a dynamic interval, you'll need to use `setTimeout` instead.\r\n *\r\n * 2. **Overlapping calls:** If the processing time of the function is longer than the interval, it may lead to overlapping calls, causing potential issues. To avoid this, you can either increase the interval or use `setTimeout` to ensure that the next call is scheduled only after the current call has completed.\r\n *\r\n * 3. **Stopping the loop:** To stop a loop created with `setInterval`, you need to call `clearInterval` with the interval ID that was returned when the loop was created. You might need to add additional checks or flags to control this behavior, which can be more complex compared to using `setTimeout`, where you can conditionally decide whether to continue the loop or not by scheduling the next call based on a condition within the function.\r\n *\r\n * 4. **Less control over execution order:** With `setInterval`, you have less control over the execution order, especially when dealing with asynchronous code or when the interval is very short. This can lead to unexpected behavior.\r\n *\r\n * In summary, using `setInterval` to create a loop is suitable for simple, periodic tasks with a fixed interval. However, if you need more control over the loop execution or need a dynamic interval between function calls, using `setTimeout` might be more appropriate.\r\n */\r\nexport class SetIntervalLoop implements LoopInterface {\r\n    private intervalId = null;\r\n\r\n    constructor(private callback: LoopCallback, private timeLogger: TimeLoggerInterface,private intervalMs:number) {\r\n    }\r\n\r\n    start() {\r\n        if(this.intervalId){\r\n            throw new Error(\"Loop already started\");\r\n        }\r\n        let prevTime: number = 0;\r\n        const animate = (t) => {\r\n            const delta = t - prevTime;\r\n            prevTime = t;\r\n            this.timeLogger.monitoringStart();\r\n            this.callback(delta);\r\n            this.timeLogger.monitoringEnd();\r\n        };\r\n        this.intervalId = setInterval(animate, this.intervalMs);\r\n    }\r\n\r\n    stop() {\r\n        if(this.intervalId){\r\n            this.intervalId = null;\r\n            clearInterval(this.intervalId);\r\n        }\r\n    }\r\n}\r\n\r\n@injectable()\r\nexport class SetIntervalLoopFactory {\r\n\r\n    constructor(\r\n        @inject(TimeLoggerName) private timeLogger:TimeLogger,\r\n        @inject(FrameLoopManagerName) private frameLoop: FrameLoopManager\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * Create a loop based on setInterval.\r\n     * See https://developer.mozilla.org/en-US/docs/Web/API/setInterval#ensure_that_execution_duration_is_shorter_than_interval_frequency\r\n     * @param name\r\n     * @param callback\r\n     * @param intervalMs\r\n     */\r\n    create(name: string, callback:LoopCallback,intervalMs:number=0): LoopRemoverInterface {\r\n        let loop = new SetIntervalLoop(callback, this.timeLogger.getTimeLogger(name),intervalMs);\r\n        this.frameLoop.addLoop(name,loop);\r\n        return {\r\n            loop: loop,\r\n            remover: () => {\r\n                this.frameLoop.removeLoop(name);\r\n            }\r\n        };\r\n    }\r\n}\r\n","import {inject, injectable} from \"inversify\";\r\nimport {FrameLoopManagerName, TimeLoggerName} from \"../../Identifier\";\r\nimport {TimeLogger, TimeLoggerInterface} from \"../perf/TimeLogger\";\r\nimport {FrameLoopManager} from \"./FrameLoopManager\";\r\nimport {LoopCallback, LoopInterface, LoopRemoverInterface} from \"./LoopInterface\";\r\n\r\n/**\r\n * Using `setTimeout(..., 0)` to create a loop instead of `setInterval` has its own advantages and use-cases. Here are a few key advantages:\r\n *\r\n * 1. **Dynamic interval:** With `setTimeout`, you can have a dynamic interval, meaning the time between consecutive function calls can be different. This is useful when you want to adjust the delay between calls based on the processing time of each iteration or some other variable condition. With `setInterval`, the time between calls is fixed.\r\n *\r\n * 2. **Prevent overlapping calls:** When using `setTimeout`, the next call is scheduled only after the completion of the current call. This ensures that no two calls of the same function will be executed simultaneously, preventing overlapping calls. With `setInterval`, if the processing time of the function is longer than the interval, it may lead to overlapping calls, causing potential issues.\r\n *\r\n * 3. **Better control over stopping the loop:** With `setTimeout`, you can conditionally decide whether to continue the loop or not by scheduling the next call based on a condition within the function. This provides better control over stopping the loop. With `setInterval`, you would need to use `clearInterval` explicitly to stop the loop, and you might need to add additional checks or flags to control this behavior.\r\n *\r\n * However, it's important to note that using `setTimeout(..., 0)` creates a microtask queue that schedules the next call as soon as the current call stack is empty, which may cause the browser to be less responsive. If you need to create a loop with a constant interval or need to ensure that the browser remains responsive, using `setInterval` might be more appropriate.\r\n *\r\n * Here's an example of how to use `setTimeout` to create a loop:\r\n */\r\n\r\nexport class SetTimeoutLoop implements LoopInterface {\r\n    enable = false;\r\n\r\n    constructor(private callback: LoopCallback, private timeLogger: TimeLoggerInterface, private timeoutMs: number) {\r\n    }\r\n\r\n    start() {\r\n        if (this.enable) {\r\n            throw new Error(\"Loop already started\");\r\n        }\r\n        this.enable = true;\r\n        let prevTime: number = performance.now();\r\n        const myLoop = () => {\r\n            const startTaskTime = performance.now();\r\n            const delta = startTaskTime - prevTime;\r\n            prevTime = startTaskTime;\r\n            this.timeLogger.monitoringStart();\r\n            // Your code here\r\n            this.callback(delta);\r\n            this.timeLogger.monitoringEnd();\r\n            const endTask = performance.now();\r\n            const taskDelta = endTask - startTaskTime;\r\n            // Schedule the next call with a dynamic interval\r\n            if (this.enable) {\r\n                setTimeout(myLoop, (taskDelta > this.timeoutMs) ? 0 : (this.timeoutMs - taskDelta));\r\n            }\r\n        }\r\n        // Start the loop\r\n        myLoop();\r\n    }\r\n\r\n    stop() {\r\n        this.enable = false;\r\n    }\r\n}\r\n\r\n@injectable()\r\nexport class SetTimeoutLoopFactory {\r\n\r\n    constructor(\r\n        @inject(TimeLoggerName) private timeLogger: TimeLogger,\r\n        @inject(FrameLoopManagerName) private frameLoop: FrameLoopManager\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * Create a loop based on setTimeout.\r\n     * This loop will try its best to run at the given interval but will not run if the previous call is not finished. (Main difference with setInterval)\r\n     * If the task takes longer than the interval, the next call will be equivalent to a setTimeout(...,0).\r\n     * if the task takes less than the interval, the next call will be equivalent to a setTimeout(...,interval - taskTime).\r\n     * @param name\r\n     * @param callback\r\n     * @param timeoutMs\r\n     */\r\n    create(name: string, callback: LoopCallback, timeoutMs: number = 0): LoopRemoverInterface {\r\n        let loop = new SetTimeoutLoop(callback, this.timeLogger.getTimeLogger(name), timeoutMs);\r\n        this.frameLoop.addLoop(name, loop);\r\n        return {\r\n            loop: loop,\r\n            remover: () => {\r\n                this.frameLoop.removeLoop(name);\r\n            }\r\n        };\r\n    }\r\n}\r\n","import {injectable} from \"inversify\";\r\n\r\nexport interface TimeLoggerInterface {\r\n    monitoringStart: () => void,\r\n    monitoringEnd: () => void\r\n}\r\n\r\nexport const SUFFIX_DELIMITER = \"-\";\r\n\r\n@injectable()\r\nexport class TimeLogger {\r\n\r\n    getTimeLogger(name: string): TimeLoggerInterface {\r\n        name = name.replace(/-[^-]*$/, \"\");//clean the name remove anythings after the last -\r\n        let minTimeMs = 0,\r\n            maxTimeMs = 0,\r\n            totalTimeMs = 0,\r\n            sampleNumber = 0,\r\n            meanTimeMs = 0,\r\n            start = 0,\r\n            last = 0;\r\n        let callbacks1 = this.callbacks;\r\n        return {\r\n            monitoringStart: () => {\r\n                start = performance.now();\r\n            },\r\n            monitoringEnd: () => {\r\n                const nowTime = performance.now();\r\n                const time = nowTime - start;\r\n                //create a mean\r\n                totalTimeMs += time;\r\n                sampleNumber++;\r\n                meanTimeMs = totalTimeMs / sampleNumber;\r\n                maxTimeMs = Math.max(maxTimeMs, time);\r\n                minTimeMs = Math.min(minTimeMs, time);\r\n                //if refresh ok notify\r\n                for (const cb of callbacks1) {\r\n                    if ((nowTime - last) > cb.refreshInterval) {\r\n                        //avoid blocking the main thread\r\n                        (async () => {\r\n                            cb.cb(name, performance.timeOrigin + nowTime,\r\n                                meanTimeMs,\r\n                                minTimeMs,\r\n                                maxTimeMs,\r\n                                sampleNumber,\r\n                                totalTimeMs);\r\n                        })();\r\n                        last = nowTime;\r\n                        totalTimeMs = 0;\r\n                        sampleNumber = 0;\r\n                        meanTimeMs = 0;\r\n                        minTimeMs = Number.MAX_VALUE;\r\n                        maxTimeMs = Number.MIN_VALUE;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    callbacks: ({\r\n        refreshInterval: number,\r\n        cb: (label: string, time: number, duration: number, minTime: number, maxTime: number,\r\n             sampleNumber: number,\r\n             totalTimeMs: number) => void\r\n    })[] = [];\r\n\r\n    onPerfLog(minimumRefreshInterval: number, callback: (\r\n        label: string,\r\n        time: number,\r\n        duration: number,\r\n        minTime: number,\r\n        maxTime: number,\r\n        sampleNumber: number,\r\n        totalTimeMs: number\r\n    ) => void): () => void {\r\n        this.callbacks.push({\r\n            refreshInterval: minimumRefreshInterval,\r\n            cb: callback\r\n        });\r\n        this.enablePerfLog(true);\r\n        return () => {\r\n            this.callbacks = this.callbacks.filter((cb) => cb.cb !== callback);\r\n        }\r\n    }\r\n\r\n    enablePerfLog(activated: boolean) {\r\n    }\r\n}\r\n"],"mappings":"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","names":["ContainerModule","FrameLoopManagerName","AnimationFrameLoopFactoryName","SetIntervalLoopFactoryName","SetTimeoutLoopFactoryName","TimeLoggerName","inject","injectable","AnimationFrameLoop","callback","timeLogger","prevTime","animate","t","delta","AnimationFrameLoopFactory","frameLoop","name","loop","__decorateClass","injectable","__decorateParam","inject","TimeLoggerName","FrameLoopManagerName","injectable","FrameLoopManager","key","entry","name","loop","__decorateClass","injectable","inject","injectable","SetIntervalLoop","callback","timeLogger","intervalMs","prevTime","animate","t","delta","SetIntervalLoopFactory","frameLoop","name","loop","__decorateClass","injectable","__decorateParam","inject","TimeLoggerName","FrameLoopManagerName","inject","injectable","SetTimeoutLoop","callback","timeLogger","timeoutMs","prevTime","myLoop","startTaskTime","delta","taskDelta","SetTimeoutLoopFactory","frameLoop","name","loop","__decorateClass","injectable","__decorateParam","inject","TimeLoggerName","FrameLoopManagerName","injectable","SUFFIX_DELIMITER","TimeLogger","name","minTimeMs","maxTimeMs","totalTimeMs","sampleNumber","meanTimeMs","start","last","callbacks1","nowTime","time","cb","minimumRefreshInterval","callback","activated","__decorateClass","injectable","AxLoopModule","ContainerModule","bind","FrameLoopManagerName","FrameLoopManager","TimeLoggerName","TimeLogger","AnimationFrameLoopFactoryName","AnimationFrameLoopFactory","SetTimeoutLoopFactoryName","SetTimeoutLoopFactory","SetIntervalLoopFactoryName","SetIntervalLoopFactory"]}